using System;
public enum CharacterType
{
    Warrior,
    Wizard
}

abstract class Character
{
    protected string _name = "";
    protected CharacterType _type;
    private bool _isVulnerable = false;

    public bool IsVulnerable => _isVulnerable;

    protected Character()
    {
        
    }

    protected Character(string name)
    {
        _name = name;
    }

    protected Character(string name, CharacterType type)
    {
        _type = type;
        _name = name;        
    }

    public abstract int DamagePoints(Character target);
    
    public abstract string ToString();
    
    public virtual bool Vulnerable()
    {
        return IsVulnerable;
    }    
}

class Warrior : Character
{
    public Warrior() : base()
    {
    }
    public Warrior(string name) : base(name)
    {
    _name = name;
    }
    public Warrior(string name, CharacterType type) : base(name, type)
    {
        _name = name;
        _type = type;
    }

    public override string ToString()
    {
    return "Character is a Warrior";
    }

    public override bool Vulnerable()
    {
    return IsVulnerable;
    }

    public override int DamagePoints(Character target)
    {
        if(target.IsVulnerable == true)
            return 10;
        return 6;
    }
}

class Wizard : Character
{
    private bool _spellReady;

    public Wizard() : base()
    {
        _isVulnerable = true;
    }
    public Wizard(string name) : base(name)
    {
    _name = name;
    _isVulnerable = true;
    }
    public Wizard(string name, CharacterType type) : base(name, type)
    {
        _name = name;
        _type = type;
        _isVulnerable = true;
    }

    public override string ToString()
    {
    return "Character is a Wizard";
    }

    public override bool Vulnerable()
    {
    return _isVulnerable;
    }

    public override int DamagePoints(Character target)
    {
        if(_spellReady)
            return 12;
        return 3;
    }

    public void PrepareSpell()
    {
        _spellReady = true;
        _isVulnerable = false;
    }
}
